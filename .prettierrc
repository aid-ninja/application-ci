{
    "extends": ["react-app", "react-app/jest", "prettier"],
    "parser": "@babel/eslint-parser",
    "globals": {
        "__DEV__": true,
        "APP_VERSION": true,
        "APP_SHORT_TITLE": true,
        "LOCALHOST_PORT": true,
        "FCM_SENDER_ID": true,
        "SOURCE_FILES": true,
        "CUSTOM_INDICATOR_SOURCES": true,
        "INDICATOR_ISOLATED_CORE": true,
        "LOCALIZATION_DICTIONARY": true,
        "APP_ID": true,
        "APP_NAME": true,
        "APP_CODE_NAME": true,
        "ELECTRON_VERSION": true,
        "CATEGORY_WORKSPACE": true,

        "BETA_ITUNES_ID": true,
        "BETA_ANDROID_NAMESPACE": true,

        "ace": true,
        "techan": true,
        "d3": true,
        "grecaptcha": true,
        "Bugsnag": true,
        "FB": true,
        "facebookConnectPlugin": true,
        "gapi": true,
        "Bloodhound": true,
        "cordova": true,
        "i18next": true,
        "Media": true,
        "PushNotification": true,
        "device": true,

        "tradovateEnvironment": true,

        "isMobile": true,
        "isPhone": true,
        "isMac": true,
        "isDesktop": true,
        "isElectron": true,
        "isTablet": true,
        "isTouchOnlyDevice": true,
        "isTouchDevice": true,
        "ChooseDeviceVersion": true,
        "device_reexport": true,
        "platform_reexport": true,
        "showElevationIfNeeded": true,
        "showDialog": true,
        "openExternalAction": true,
        "openModal": true,
        "saveAs": true,
        "currentWorkspaceAsync": true,
        "sessionStorageAsync": true,
        "hostBaseAddress": true,
        "alertLocale": true,
        "confirmLocale": true,
        "showTryItWarning": true,
        "WalkMePlayerAPI": true,
        "PDFJS": true,
        "Flutter": true,
        "FileError": true
    },
    "env": {
        "jquery": true,
        "browser": true
    },
    "rules": {
        "react/jsx-filename-extension": 0,
        "react/jsx-quotes": 0,
        "jsx-quotes": [2, "prefer-double"],
        "import/no-unresolved": [1, { "ignore": ["^@.*"], "commonjs": true }],
        "quotes": [2, "double"],
        "no-use-before-define": [2, "nofunc"],
        "func-names": 0,
        "brace-style": [2, "1tbs", { "allowSingleLine": true }],
        "no-console": 0,
        "no-alert": 0,
        "comma-dangle": 0,
        "react/prefer-es6-class": 0,
        "max-len": [
            "error",
            {
                "code": 180,
                "tabWidth": 4,
                "ignoreTemplateLiterals": true,
                "ignoreStrings": true,
                "ignoreRegExpLiterals": true,
                "ignorePattern": "d=\"([\\s\\S]*?)\""
            }
        ],
        "react/prefer-stateless-function": 0,
        "react/require-render-return": 0,
        "react/jsx-first-prop-new-line": 0,
        "no-mixed-operators": 0,
        "no-plusplus": 0,
        "import/no-anonymous-default-export": "off",
        "react-hooks/exhaustive-deps": "off",
        "no-unused-vars": "off",
        "jsx-a11y/anchor-is-valid": "off",
        "jsx-a11y/anchor-has-content": "off",
        "jsx-a11y/alt-text": "off",
        "default-case": "off",
        "eqeqeq": "off",
        "no-restricted-globals": "off"
    },
    /*
ðŸ‘‹      Hi! This file was autogenerated by tslint-to-eslint-config.
        https://github.com/typescript-eslint/tslint-to-eslint-config

        It represents the closest reasonable ESLint configuration to this
        project's original TSLint configuration.

        We recommend eventually switching this configuration to extend from
        the recommended rulesets in typescript-eslint.
        https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

        Happy linting! ðŸ’–

        6 ESLint rules behave differently from their TSLint counterparts:
        * arrow-body-style:
            - ESLint will throw an error if the function body is multiline yet has a one-line return on it.
        * no-console:
            - Custom console methods, if they exist, will no longer be allowed.
        * @typescript-eslint/no-unused-expressions:
            - The TSLint optional config "allow-new" is the default ESLint behavior and will no longer be ignored.
        * brace-style:
            - ESLint's brace-style will check all tokens.
        * eqeqeq:
            - Option "smart" allows for comparing two literal values, evaluating the value of typeof and null comparisons.
        * no-underscore-dangle:
            - Leading or trailing underscores (_) on identifiers will now be forbidden.

        2 rules are not known by tslint-to-eslint-config to have ESLint equivalents:
        * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "import-spacing".
        * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "whitespace".
    */
    "overrides": [
        {
            "files": ["**/*.ts", "**/*.tsx"],
            "env": {
                "browser": true,
                "es6": true,
                "node": true
            },
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
                "project": "tsconfig.json",
                "sourceType": "module"
            },
            "plugins": [
                "eslint-plugin-jsdoc",
                "@typescript-eslint",
                "@typescript-eslint/tslint"
            ],
            "rules": {
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/dot-notation": "off",
                "@typescript-eslint/explicit-function-return-type": "off",
                "@typescript-eslint/explicit-member-accessibility": [
                    "off",
                    {
                        "accessibility": "explicit"
                    }
                ],
                "@typescript-eslint/explicit-module-boundary-types": "off",
                "@typescript-eslint/member-delimiter-style": [
                    "error",
                    {
                        "multiline": {
                            "delimiter": "semi",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "semi",
                            "requireLast": false
                        }
                    }
                ],
                "@typescript-eslint/member-ordering": "error",
                "@typescript-eslint/naming-convention": [
                    "off",
                    {
                        "selector": "variable",
                        "format": ["camelCase", "UPPER_CASE"],
                        "leadingUnderscore": "forbid",
                        "trailingUnderscore": "forbid"
                    }
                ],
                "@typescript-eslint/no-empty-function": "off",
                "@typescript-eslint/no-empty-interface": "error",
                "@typescript-eslint/no-inferrable-types": [
                    "off",
                    {
                        "ignoreParameters": true
                    }
                ],
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/no-shadow": [
                    "error",
                    {
                        "hoist": "all"
                    }
                ],
                "@typescript-eslint/no-unused-expressions": "error",
                "@typescript-eslint/prefer-for-of": "off",
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/quotes": ["error", "double"],
                "@typescript-eslint/semi": ["error", "always"],
                "@typescript-eslint/type-annotation-spacing": "error",
                "@typescript-eslint/typedef": "off",
                "@typescript-eslint/unified-signatures": "error",
                "arrow-body-style": "error",
                "brace-style": ["error", "1tbs"],
                "constructor-super": "error",
                "curly": "error",
                "default-case": "off",
                "dot-notation": "off",
                "eol-last": "error",
                "eqeqeq": ["error", "smart"],
                "guard-for-in": "error",
                "id-denylist": "off",
                "id-match": "off",
                "indent": "off",
                "jsdoc/no-types": "error",
                "linebreak-style": "off",
                "max-len": [
                    "error",
                    {
                        "code": 140
                    }
                ],
                "no-bitwise": "error",
                "no-caller": "error",
                "no-console": [
                    "error",
                    {
                        "allow": [
                            "log",
                            "warn",
                            "dir",
                            "timeLog",
                            "assert",
                            "clear",
                            "count",
                            "countReset",
                            "group",
                            "groupEnd",
                            "table",
                            "dirxml",
                            "error",
                            "groupCollapsed",
                            "Console",
                            "profile",
                            "profileEnd",
                            "timeStamp",
                            "context"
                        ]
                    }
                ],
                "no-debugger": "error",
                "no-empty": "off",
                "no-empty-function": "off",
                "no-eval": "error",
                "no-fallthrough": "error",
                "no-new-wrappers": "error",
                "no-restricted-imports": ["error", "rxjs/Rx"],
                "no-shadow": "off",
                "no-throw-literal": "error",
                "no-trailing-spaces": "error",
                "no-undef-init": "error",
                "no-underscore-dangle": "off",
                "no-unused-expressions": "off",
                "no-unused-labels": "error",
                "no-var": "error",
                "no-void": "off",
                "no-warning-comments": [
                    "off",
                    {
                        "location": "anywhere",
                        "terms": [
                            "BUG",
                            "HACK",
                            "FIXME",
                            "LATER",
                            "LATER2",
                            "TODO"
                        ]
                    }
                ],
                "prefer-const": "error",
                "quotes": "off",
                "radix": "error",
                "semi": "off",
                "spaced-comment": [
                    "error",
                    "always",
                    {
                        "markers": ["/"]
                    }
                ],
                "@typescript-eslint/tslint/config": [
                    "error",
                    {
                        "rules": {
                            "import-spacing": true,
                            "whitespace": [
                                true,
                                "check-branch",
                                "check-decl",
                                "check-operator",
                                "check-separator",
                                "check-type"
                            ]
                        }
                    }
                ]
            },
            "settings": {
                "react": {
                    "version": "detect"
                },
                "import/resolver": {
                    "node": {
                      "extensions": [".js", ".jsx", ".ts", ".tsx"],
                    }
                }
            }
        }
    ]
}
